
# application.properties


spring.application.name=Licenta

# ==================================
# === CONFIGURARE BAZ? DE DATE   ===
# ==================================

spring.datasource.url=${JDBC_DATABASE_URL}
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# ==================================
# === CONFIGURARE PORT SERVER    ===
# ==================================
server.port=${PORT:8080}
management.server.port=${PORT:8080}

# Bind to all interfaces
server.address=0.0.0.0

# ==================================
# === CONFIGURARE JPA & HIBERNATE ===
# ==================================
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true
spring.jpa.properties.hibernate.jdbc.time_zone=Europe/Bucharest

# ==================================
# === CONFIGURARE JSON (JACKSON) ===
# ==================================
spring.jackson.serialization.fail-on-empty-beans=false
spring.main.allow-circular-references=true
spring.jackson.time-zone=Europe/Bucharest

# ==================================
# === CONFIGURARE UPLOAD FISIERE ===
# ==================================
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=50MB

# ==================================
# === CONFIGURARE EMAIL (GMAIL)  ===
# ==================================
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
# Datele de autentificare pentru email sunt citite din variabilele de mediu.
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}

# ==================================
# === CONFIGURARE STRIPE         ===
# ==================================
stripe.secret.key=${STRIPE_SECRET_KEY}
stripe.webhook.secret=${STRIPE_WEBHOOK_SECRET}

# ==================================
# === CONFIGURARE JWT            ===
# ==================================
JWT_SECRET=${JWT_SECRET}

# ==================================
# === CONFIGURARI LOGGING        ===
# ==================================
logging.level.licenta=${LOG_LEVEL:INFO}
logging.level.org.springframework.security=${SECURITY_LOG_LEVEL:WARN}

# ==================================
# === MANAGEMENT ENDPOINTS       ===
# ==================================
# Pentru health checks pe Render
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=when-authorized

# ==================================
# === ALTE CONFIGUR?RI           ===
# ==================================
# Necesare pentru a gestiona cererile de tip OPTIONS (CORS).
spring.mvc.dispatch-options-request=true

# Error handling pentru produc?ie
server.error.include-stacktrace=never
server.error.include-message=always

# ==================================
# === CONFIGURARE DUAL ENVIRONMENT ===
# ==================================
# CORS dinamic bazat pe environment
cors.allowed.origins=${CORS_ORIGINS:http://localhost:3000}

spring.web.resources.static-locations=classpath:/static/
spring.web.resources.cache.period=31556926

# Pentru React Router (doar production)

spring.mvc.throw-exception-if-no-handler-found=true